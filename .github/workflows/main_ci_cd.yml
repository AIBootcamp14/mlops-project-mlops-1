# .github/workflows/main_ci_cd.yml
name: MLOps CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install --no-cache-dir -r requirements.txt --break-system-packages

      - name: Download NLTK data
        run: python -m nltk.downloader punkt wordnet stopwords

      - name: Preprocess data
        run: python data/scripts/preprocess_data.py
      
      - name: Validate data
        run: python data/scripts/validate_data.py

      - name: Train model
        run: python notebooks/train_model.py

      - name: Run tests
        run: python -m pytest tests/test_model.py

  deploy:
    needs: ci
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mlops-spam-classifier:latest

  monitor:
    needs: deploy
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install --no-cache-dir -r requirements.txt --break-system-packages

      - name: Download NLTK data
        run: python -m nltk.downloader punkt wordnet stopwords

      - name: Monitor model performance
        id: monitor_job
        run: |
          python src/model_monitor.py
          # 여기에 모델 재학습을 트리거하는 로직을 추가할 수 있음
          echo "모델 모니터링 완료."