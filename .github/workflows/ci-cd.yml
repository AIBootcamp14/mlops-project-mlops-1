# 모델 학습 및 평가 파이프라인을 정의

# 워크플로우의 이름입니다. GitHub Actions UI에 "Model Training Pipeline"으로 표시됩니다.
name: Model Training Pipeline

# 워크플로우가 언제 트리거될지 정의합니다.
on:
  push:
    branches:
      - main # main 브랜치에 코드가 푸시될 때 워크플로우를 실행합니다.
    paths:
      - 'notebooks/model_training.ipynb' # 노트북 파일 변경 시
      - 'notebooks/train_model.py'        # 변환된 파이썬 스크립트 변경 시
      - 'data/spam.csv'                   # 데이터 파일 변경 시
      - 'requirements.txt'                # 필요한 라이브러리 변경 시

  workflow_dispatch: # GitHub Actions UI에서 수동으로 워크플로우를 실행할 수 있게 합니다.

# 워크플로우를 구성하는 일련의 작업(jobs)들을 정의합니다.
jobs:
  train-and-test:
    runs-on: ubuntu-latest # 이 작업이 실행될 환경을 정의합니다. (Ubuntu 최신 버전)

    # 작업의 단계(steps)들을 정의합니다.
    steps:
    - name: Checkout code # 1. GitHub 저장소 코드를 워크플로우 환경으로 체크아웃합니다.
      uses: actions/checkout@v3

    - name: Set up Python # 2. Python 환경을 설정합니다.
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # 사용할 Python 버전 지정 (requirements.txt와 호환되는 버전)

    - name: Install dependencies # 3. requirements.txt에 명시된 라이브러리를 설치합니다.
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # NLTK 데이터가 필요하면 여기서 다운로드합니다.
        # (train_model.py에서 PorterStemmer를 사용하므로 필요할 수 있습니다.)
        python -c "import nltk; nltk.download('punkt'); nltk.download('averaged_perceptron_tagger')"


    - name: Run Model Training and Evaluation # 4. 모델 학습 스크립트를 실행합니다.
      run: |
        # 모델 저장 폴더가 없으면 생성합니다.
        mkdir -p models
        # notebooks 폴더에 있는 train_model.py 스크립트를 실행합니다.
        python notebooks/train_model.py

    - name: Upload Model Artifacts # 5. 학습된 모델과 벡터라이저 파일을 GitHub Actions 아티팩트로 업로드합니다.
      uses: actions/upload-artifact@v4 # v3에서 v4로 변경되었습니다!
      with:
        name: spam-classifier-model # 아티팩트의 이름
        path: | # 업로드할 파일의 경로
          models/spam_classifier_model.joblib
          models/tfidf_vectorizer.joblib
