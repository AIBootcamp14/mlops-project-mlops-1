name: Model Monitoring and Retraining

on:
  schedule:
    - cron: '0 0 * * *' 
  workflow_dispatch:

permissions:
  actions: write

jobs:
  check_and_retrain:
    runs-on: ubuntu-latest
    outputs:
      retrain_needed: ${{ steps.final_retrain_check.outputs.retrain_needed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install --no-cache-dir -r requirements.txt --break-system-packages

      - name: Download NLTK data
        run: python -m nltk.downloader punkt wordnet stopwords

      - name: Generate new data
        run: python src/data_generator.py

      - name: Get latest artifact info
        id: get_artifact_info
        uses: actions/github-script@v6
        with:
          script: |
            const { data: { workflow_runs } } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main_ci_cd.yml',
              branch: 'main',
              status: 'success',
            });
            
            const lastSuccessfulRun = workflow_runs[0];
            if (lastSuccessfulRun) {
              const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: lastSuccessfulRun.id,
              });
              const modelsArtifact = artifacts.artifacts.find(artifact => artifact.name === 'models');
              
              if (modelsArtifact) {
                const downloadUrl = modelsArtifact.archive_download_url;
                console.log('✅ Found models artifact. Download URL: ' + downloadUrl);
                core.setOutput('download_url', downloadUrl);
                return;
              }
            }
            
            console.log('⚠️ No models artifact found.');
            core.setOutput('download_url', '');

      - name: Download and unzip artifact
        if: steps.get_artifact_info.outputs.download_url != ''
        run: |
          mkdir -p models
          curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o artifact.zip "${{ steps.get_artifact_info.outputs.download_url }}"
          unzip -o artifact.zip -d models
          rm artifact.zip
      
      - name: Monitor model performance
        id: monitor_step
        if: steps.get_artifact_info.outputs.download_url != ''
        run: |
          python src/model_monitor.py

      - name: Check for initial build or retrain needed
        id: final_retrain_check
        run: |
          # monitor_step이 retrain_needed를 출력하도록 수정했으므로,
          # GITHUB_OUTPUT을 사용하여 값을 가져옵니다.
          retrain_needed_output=$(python src/model_monitor.py | grep retrain_needed | cut -d= -f2)
          echo "retrain_needed=$retrain_needed_output" >> $GITHUB_OUTPUT
          
          if [ "$retrain_needed_output" == "true" ]; then
            echo "🔥 모델 성능이 저하되어 재학습 및 배포를 위한 CI/CD 워크플로우를 트리거합니다."
          else
            echo "✨ 모니터링 완료. 재학습은 필요 없습니다."
          fi
      
      - name: Trigger CI/CD workflow
        if: steps.final_retrain_check.outputs.retrain_needed == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main_ci_cd.yml',
              ref: 'main',
            });
            console.log('✅ main_ci_cd.yml workflow has been triggered.');
