name: Model Monitoring and Retraining

on:
  schedule:
    - cron: '0 0 * * *' 
  workflow_dispatch:

jobs:
  check_and_retrain:
    runs-on: ubuntu-latest
    outputs:
      retrain_needed: ${{ steps.monitor_step.outputs.retrain_needed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install --no-cache-dir -r requirements.txt --break-system-packages

      - name: Download NLTK data
        run: python -m nltk.downloader punkt wordnet stopwords

      - name: Find and download latest models artifact
        id: download_artifact_step
        uses: actions/github-script@v6
        with:
          script: |
            const { data: { workflow_runs } } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main_ci_cd.yml',
              branch: 'main',
              status: 'success',
            });
            
            const lastSuccessfulRun = workflow_runs[0];
            if (lastSuccessfulRun) {
              const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: lastSuccessfulRun.id,
              });
              const modelsArtifact = artifacts.artifacts.find(artifact => artifact.name === 'models');
              
              if (modelsArtifact) {
                console.log('✅ Found models artifact from run ' + lastSuccessfulRun.id);
                core.setOutput('artifact_exists', 'true');
                
                const download = await github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: modelsArtifact.id,
                  archive_format: 'zip'
                });
                
                const fs = require('fs');
                fs.writeFileSync('artifact.zip', Buffer.from(download.data));
                
                console.log('✅ models artifact downloaded.');
                return;
              }
            }
            
            console.log('⚠️ No models artifact found. Forcing a retrain.');
            core.setOutput('artifact_exists', 'false');

      - name: Unzip artifact
        if: steps.download_artifact_step.outputs.artifact_exists == 'true'
        run: |
          unzip artifact.zip -d models
          rm artifact.zip
      
      - name: Monitor model performance
        id: monitor_step
        if: steps.download_artifact_step.outputs.artifact_exists == 'true'
        run: |
          python src/model_monitor.py
          
      - name: Retrain and Deploy if needed
        id: final_retrain_check
        run: |
          if [ "${{ steps.download_artifact_step.outputs.artifact_exists }}" == "false" ]; then
            echo "retrain_needed=true" >> $GITHUB_OUTPUT
            echo "🔥 최초 실행입니다. 재학습 및 배포를 위한 CI/CD 워크플로우를 트리거합니다."
          elif [ "${{ steps.monitor_step.outputs.retrain_needed }}" == "true" ]; then
            echo "retrain_needed=true" >> $GITHUB_OUTPUT
            echo "🔥 모델 성능이 저하되어 재학습 및 배포를 위한 CI/CD 워크플로우를 트리거합니다."
          else
            echo "retrain_needed=false" >> $GITHUB_OUTPUT
            echo "✨ 모니터링 완료. 재학습은 필요 없습니다."
          fi
      
      - name: Trigger CI/CD workflow
        if: steps.final_retrain_check.outputs.retrain_needed == 'true'
        run: |
          echo "Triggering main_ci_cd.yml workflow..."
          # 실제로는 다른 워크플로우를 호출하거나, 재학습/배포 스크립트를 여기에 직접 작성
          # 예시: GitHub CLI를 사용하여 main_ci_cd.yml 워크플로우 호출
          # gh workflow run main_ci_cd.yml --ref main
