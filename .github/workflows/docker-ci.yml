# test1

# 워크플로우의 이름입니다. GitHub Actions UI에 표시됩니다.
name: Docker CI/CD

# 이 워크플로우가 언제 실행될지 정의합니다.
on:
  push:
    # 'main' 브랜치에 코드가 푸시될 때마다 이 워크플로우를 실행합니다.
    branches:
      - main
  # pull_request:
  #   branches:
  #     - main

# 워크플로우에서 실행될 작업(jobs)들을 정의합니다.
jobs:
  build-and-push:
    # 이 작업이 실행될 환경을 정의합니다. 최신 Ubuntu 환경을 사용합니다.
    runs-on: ubuntu-latest

    # 작업에서 실행될 단계(steps)들을 정의합니다.
    steps:
      # 1. 저장소 코드를 체크아웃합니다. (GitHub Actions에서 기본으로 제공하는 액션)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker Hub에 로그인합니다.
      # GitHub Secrets에 저장된 사용자 이름과 접근 토큰을 사용합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} # 또는 DOCKER_ACCESS_TOKEN

      # 3. Docker 이미지를 빌드하고 Docker Hub에 푸시합니다.
      # 빌드 컨텍스트는 현재 디렉토리(.)이며, Dockerfile도 여기에 있다고 가정합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: rladud9689/spam-classifier-api:latest

  deploy: # 새로운 배포 작업
    # 이 작업은 'build-and-push' 작업이 성공적으로 완료된 후에 실행됩니다.
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 1. SSH를 통해 EC2 인스턴스에 접속하고 Docker 명령어를 실행합니다.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 IP 주소 (GitHub Secret)
          username: ubuntu # EC2 인스턴스의 기본 사용자 이름 (Ubuntu AMI의 경우 'ubuntu')
          key: ${{ secrets.EC2_SSH_KEY }} # EC2 접속을 위한 SSH 개인 키 (GitHub Secret)
          script: |
            # 기존 컨테이너 중지 및 삭제
            docker stop spam-api || true # 컨테이너가 없어도 에러 없이 진행
            docker rm spam-api || true # 컨테이너가 없어도 에러 없이 진행

            # 최신 Docker 이미지 가져오기
            docker pull rladud9689/spam-classifier-api:latest

            # 새로운 컨테이너 실행
            docker run -d -p 80:8000 --name spam-api rladud9689/spam-classifier-api:latest

            # 컨테이너 상태 확인 (선택 사항)
            docker ps -a
